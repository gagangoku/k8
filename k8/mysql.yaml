# docker run -p 3306:3306 -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:8.0.32

apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv3
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 4Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/var/lib/data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim3
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 4Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - image: ubuntu/mysql:8.0-20.04_beta #mysql:8.0.32
          # In case you need to ssh into the container without starting mysql
          # command: ["/bin/sh", "-ec", "while :; do echo '.'; sleep 5 ; done"]
          name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: password
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
              subPath: mysqldata
            - name: mysql-cnf-file
              mountPath: /etc/mysql/my.cnf
              subPath: mysql.my.cnf
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim3
        - configMap:
            # Create using kubectl create configmap mysql-cnf-file --from-file=mysql.my.cnf
            defaultMode: 420
            name: mysql-cnf-file
          name: mysql-cnf-file
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
  clusterIP: None